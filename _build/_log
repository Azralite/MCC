### Starting build.
# Target: mmlc.ml.depends, tags: { extension:ml, file:mmlc.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules mmlc.ml > mmlc.ml.depends # cached
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o ast.cmo ast.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex.opt -q lexer.mll
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules lexer.ml > lexer.ml.depends
# Target: parser.mly.depends, tags: { extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep '/usr/bin/ocamldep.opt -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet }
menhir --ocamlc /usr/bin/ocamlc.opt --infer parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o parser.cmi parser.mli
# Target: printAst.ml.depends, tags: { extension:ml, file:printAst.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules printAst.ml > printAst.ml.depends # cached
# Target: printAst.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:printAst.cmo, file:printAst.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o printAst.cmo printAst.ml # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o lexer.cmo lexer.ml
# Target: mmlc.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:mmlc.cmo, file:mmlc.ml, implem, ocaml, quiet }
/usr/bin/ocamlc.opt -c -o mmlc.cmo mmlc.ml
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep.opt -modules parser.ml > parser.ml.depends
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o ast.cmx ast.ml
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o parser.cmx parser.ml
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o lexer.cmx lexer.ml
# Target: printAst.cmx, tags: { compile, extension:cmx, extension:ml, file:printAst.cmx, file:printAst.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o printAst.cmx printAst.ml
# Target: mmlc.cmx, tags: { compile, extension:cmx, extension:ml, file:mmlc.cmx, file:mmlc.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt.opt -c -o mmlc.cmx mmlc.ml
# Target: mmlc.native, tags: { dont_link_with, extension:native, file:mmlc.native, link, native, ocaml, program, quiet }
/usr/bin/ocamlopt.opt ast.cmx parser.cmx lexer.cmx printAst.cmx mmlc.cmx -o mmlc.native
# Compilation successful.
